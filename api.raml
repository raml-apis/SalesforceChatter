#%RAML 0.8
title: Chatter
version: v34.0
baseUri: https://na1.salesforce.com/services/data/{version}
schemas:
  - actionLinkGroupDefinitionRequest: !include schemas/actionLinkGroupDefinitionRequest-schema.json
  - actionLinkUpdateStatusRequest: !include schemas/actionLinkUpdateStatusRequest-schema.json
  - announcementsResourcePatchRequest: !include schemas/announcementsResourcePatchRequest-schema.json
  - genericBatchCollectionInputRequest: !include schemas/genericBatchCollectionInputRequest-schema.json
  - genericBatchCollectionInputResponse: !include schemas/genericBatchCollectionInputResponse-schema.json
  - chatterResource: !include schemas/chatterResource-schema.json
  - addModerationFlagRequest: !include schemas/addModerationFlagRequest-schema.json
  - dashboardComponentSnapshotResourceRequest: !include schemas/dashboardComponentSnapshotResourceRequest-schema.json
  - datacloudOrdersRequest: !include schemas/datacloudOrdersRequest-schema.json
  - feedElementsPostSearchRequest: !include schemas/feedElementsPostSearchRequest-schema.json
  - feedElementsBatchPostRequest: !include schemas/feedElementsBatchPostRequest-schema.json
  - feedElementsCapabilityBookmarks: !include schemas/feedElementsCapabilityBookmarks-schema.json
  - addFeedElementsCapabilityTopicRequest: !include schemas/addFeedElementsCapabilityTopicRequest-schema.json
  - feedsListFavoritesRequest: !include schemas/feedsListFavoritesRequest-schema.json
  - updateUserFeedsFavoritesRequest: !include schemas/updateUserFeedsFavoritesRequest-schema.json
  - uploadNewFileRequest: !include schemas/uploadNewFileRequest-schema.json
  - fileShareRequest: !include schemas/fileShareRequest-schema.json
  - addingFileInFolderResponse: !include schemas/addingFileInFolderResponse-schema.json
  - updateGroupMemberRoleRequest: !include schemas/updateGroupMemberRoleRequest-schema.json
  - createGroupInTheOrganizationRequest: !include schemas/createGroupInTheOrganizationRequest-schema.json
  - updateInformationOboutGroupRequest: !include schemas/updateInformationOboutGroupRequest-schema.json
  - createGroupAnnouncementRequest: !include schemas/createGroupAnnouncementRequest-schema.json
  - groupMembersPrivateResponse: !include schemas/groupMembersPrivateResponse-schema.json
  - createGroupMembersPrivateResponse: !include schemas/createGroupMembersPrivateResponse-schema.json
  - createGroupPhotoRequest: !include schemas/createGroupPhotoRequest-schema.json
  - createGroupRecordRequest: !include schemas/createGroupRecordRequest-schema.json
  - influenceResourceResponse: !include schemas/influenceResourceResponse-schema.json
  - createManagedTopicsRequest: !include schemas/createManagedTopicsRequest-schema.json
  - reoderManagedTopicsRequest: !include schemas/reoderManagedTopicsRequest-schema.json
  - mentionsCompletionsResponse: !include schemas/mentionsCompletionsResponse-schema.json
  - motifsResourceResponse: !include schemas/motifsResourceResponse-schema.json
  - batchMotifsResourceResponse: !include schemas/batchMotifsResourceResponse-schema.json
  - notificationsPushRequest: !include schemas/notificationsPushRequest-schema.json
  - recommendationDefinitionsRequest: !include schemas/recommendationDefinitionsRequest-schema.json
  - recommendationDefinitionModifyResquest: !include schemas/recommendationDefinitionModifyResquest-schema.json
  - createTopicsRecordsResourceRequest: !include schemas/createTopicsRecordsResourceRequest-schema.json
  - topicsRecordsResourceRequest: !include schemas/topicsRecordsResourceRequest-schema.json
  - createScheduledRecommendationsRequest: !include schemas/createScheduledRecommendationsRequest-schema.json
  - actionLinkDefinitionInputRequest: !include schemas/actionLinkDefinitionInputRequest-schema.json
  - actionLinkGroupDefinitionInputRequest: !include schemas/actionLinkGroupDefinitionInputRequest-schema.json
  - actionLinkInputRequest: !include schemas/actionLinkInputRequest-schema.json
  - actionLinkTemplateBindingInputRequest: !include schemas/actionLinkTemplateBindingInputRequest-schema.json
  - announcementInputRequest: !include schemas/announcementInputRequest-schema.json
  - associatedActionsCapabilityInputRequest: !include schemas/associatedActionsCapabilityInputRequest-schema.json
  - attachmentInputCanvasAppRequest: !include schemas/attachmentInputCanvasAppRequest-schema.json
  - attachmentInputExistingContentRequest: !include schemas/attachmentInputExistingContentRequest-schema.json
  - attachmentInputFeedPollRequest: !include schemas/attachmentInputFeedPollRequest-schema.json
  - attachmentInputLinkRequest: !include schemas/attachmentInputLinkRequest-schema.json
  - attachmentInputNewFileUploadRequest: !include schemas/attachmentInputNewFileUploadRequest-schema.json
  - batchCollectionInputRequest: !include schemas/batchCollectionInputRequest-schema.json
  - batchInputRequest: !include schemas/batchInputRequest-schema.json
  - bookmarksCapabilityInputRequest: !include schemas/bookmarksCapabilityInputRequest-schema.json
  - canvasCapabilityInputRequest: !include schemas/canvasCapabilityInputRequest-schema.json
  - commentInputRequest: !include schemas/commentInputRequest-schema.json
  - commentCapabilitiesInputRequest: !include schemas/commentCapabilitiesInputRequest-schema.json
  - contentCapabilityInputRequest: !include schemas/contentCapabilityInputRequest-schema.json
  - datacloudOrderInputRequest: !include schemas/datacloudOrderInputRequest-schema.json
  - dashboardComponentSnapshotInputRequest: !include schemas/dashboardComponentSnapshotInputRequest-schema.json
  - feedElementCapabilitiesInputRequest: !include schemas/feedElementCapabilitiesInputRequest-schema.json
  - feedFavoriteInputRequest: !include schemas/feedFavoriteInputRequest-schema.json
  - feedItemInputRequest: !include schemas/feedItemInputRequest-schema.json
  - feedItemTopicInputRequest: !include schemas/feedItemTopicInputRequest-schema.json
  - feedPollInputRequest: !include schemas/feedPollInputRequest-schema.json
  - fileInputRequest: !include schemas/fileInputRequest-schema.json
  - fileSharesInputRequest: !include schemas/fileSharesInputRequest-schema.json
  - folderInputRequest: !include schemas/folderInputRequest-schema.json
  - folderItemInputRequest: !include schemas/folderItemInputRequest-schema.json
  - followingInputRequest: !include schemas/followingInputRequest-schema.json
  - genericBatchInputRequest: !include schemas/genericBatchInputRequest-schema.json
  - groupChatterSettingsInputRequest: !include schemas/groupChatterSettingsInputRequest-schema.json
  - groupInformationInputRequest: !include schemas/groupInformationInputRequest-schema.json
  - groupInputRequest: !include schemas/groupInputRequest-schema.json
  - groupMemberInputRequest: !include schemas/groupMemberInputRequest-schema.json
  - groupMembershipRequestUpdateRequest: !include schemas/groupMembershipRequestUpdateRequest-schema.json
  - groupRecordInputRequest: !include schemas/groupRecordInputRequest-schema.json
  - linkCapabilityInputRequest: !include schemas/linkCapabilityInputRequest-schema.json
  - managedTopicInputRequest: !include schemas/managedTopicInputRequest-schema.json
  - managedTopicPositionCollectionInputRequest: !include schemas/managedTopicPositionCollectionInputRequest-schema.json
  - managedTopicPositionInputRequest: !include schemas/managedTopicPositionInputRequest-schema.json
  - messageBodyInputRequest: !include schemas/messageBodyInputRequest-schema.json
  - messageSegmentInputHashTagRequest: !include schemas/messageSegmentInputHashTagRequest-schema.json
  - messageSegmentInputLinkRequest: !include schemas/messageSegmentInputLinkRequest-schema.json
  - messageSegmentInputMentionRequest: !include schemas/messageSegmentInputMentionRequest-schema.json
  - messageSegmentInputTextRequest: !include schemas/messageSegmentInputTextRequest-schema.json
  - moderationFlagInputRequest: !include schemas/moderationFlagInputRequest-schema.json
  - photoInputRequest: !include schemas/photoInputRequest-schema.json
  - pollCapabilityInputRequest: !include schemas/pollCapabilityInputRequest-schema.json
  - pushNotificationInputRequest: !include schemas/pushNotificationInputRequest-schema.json
  - questionAndAnswersCapabilityInputRequest: !include schemas/questionAndAnswersCapabilityInputRequest-schema.json
  - recommendationDefinitionInputRequest: !include schemas/recommendationDefinitionInputRequest-schema.json
  - requestHeaderInputRequest: !include schemas/requestHeaderInputRequest-schema.json
  - scheduledRecommendationInputRequest: !include schemas/scheduledRecommendationInputRequest-schema.json
  - shareInputRequest: !include schemas/shareInputRequest-schema.json
  - topicAssignmentInputRequest: !include schemas/topicAssignmentInputRequest-schema.json
  - topicEndorsementInputRequest: !include schemas/topicEndorsementInputRequest-schema.json
  - topicInputRequest: !include schemas/topicInputRequest-schema.json
  - userChatterSettingsInputRequest: !include schemas/userChatterSettingsInputRequest-schema.json
  - userInputRequest: !include schemas/userInputRequest-schema.json
  - userMessageRequest: !include schemas/userMessageRequest-schema.json
  - userMessageRecipientInputRequest: !include schemas/userMessageRecipientInputRequest-schema.json
  - userMessageRecipientListInputRequest: !include schemas/userMessageRecipientListInputRequest-schema.json
  - userStatusInputRequest: !include schemas/userStatusInputRequest-schema.json
  - userStreamconversationInputRequest: !include schemas/userStreamconversationInputRequest-schema.json
  - actionLinkDefinitionResponse: !include schemas/actionLinkDefinitionResponse-schema.json
  - actionLinkDiagnosticResponse: !include schemas/actionLinkDiagnosticResponse-schema.json
  - actionLinkGroupDefinitionResponse: !include schemas/actionLinkGroupDefinitionResponse-schema.json
  - addressResponse: !include schemas/addressResponse-schema.json
  - announcementResponse: !include schemas/announcementResponse-schema.json
  - announcementPageResponse: !include schemas/announcementPageResponse-schema.json
  - approvalCapabilityResponse: !include schemas/approvalCapabilityResponse-schema.json
  - approvalPostTemplateFieldResponse: !include schemas/approvalPostTemplateFieldResponse-schema.json
  - articleItemResponse: !include schemas/articleItemResponse-schema.json
  - associatedActionsCapabilityResponse: !include schemas/associatedActionsCapabilityResponse-schema.json
  - bannerCapabilityResponse: !include schemas/bannerCapabilityResponse-schema.json
  - batchResultItemResponse: !include schemas/batchResultItemResponse-schema.json
  - batchResultsResponse: !include schemas/batchResultsResponse-schema.json
  - bookmarksCapabilityResponse: !include schemas/bookmarksCapabilityResponse-schema.json
  - caseCommentCapabilityResponse: !include schemas/caseCommentCapabilityResponse-schema.json
  - canvasCapabilityResponse: !include schemas/canvasCapabilityResponse-schema.json
  - chatterActivityResponse: !include schemas/chatterActivityResponse-schema.json
  - chatterDirectoryResponse: !include schemas/chatterDirectoryResponse-schema.json
  - chatterInfluenceResponse: !include schemas/chatterInfluenceResponse-schema.json
  - chatterLikesCapabilityResponse: !include schemas/chatterLikesCapabilityResponse-schema.json
  - clientinfoResponse: !include schemas/clientinfoResponse-schema.json
  - commentResponse: !include schemas/commentResponse-schema.json
  - commentCapabilitiesResponse: !include schemas/commentCapabilitiesResponse-schema.json
  - commentPageResponse: !include schemas/commentPageResponse-schema.json
  - commentsCapabilityResponse: !include schemas/commentsCapabilityResponse-schema.json
  - communityResponse: !include schemas/communityResponse-schema.json
  - communityPageResponse: !include schemas/communityPageResponse-schema.json
  - connectDirectoryResponse: !include schemas/connectDirectoryResponse-schema.json
  - contentCapabilityResponse: !include schemas/contentCapabilityResponse-schema.json
  - conversationDetailResponse: !include schemas/conversationDetailResponse-schema.json
  - conversationSummaryResponse: !include schemas/conversationSummaryResponse-schema.json
  - conversationSummaryCollectionResponse: !include schemas/conversationSummaryCollectionResponse-schema.json
  - conversationUnreadCountResponse: !include schemas/conversationUnreadCountResponse-schema.json
  - dashboardComponentSnapshotResponse: !include schemas/dashboardComponentSnapshotResponse-schema.json
  - dashboardComponentSnapshotCapabilityResponse: !include schemas/dashboardComponentSnapshotCapabilityResponse-schema.json
  - datacloudCompanyResponse: !include schemas/datacloudCompanyResponse-schema.json
  - datacloudCompanyCollectionResponse: !include schemas/datacloudCompanyCollectionResponse-schema.json
  - datacloudContactResponse: !include schemas/datacloudContactResponse-schema.json
  - datacloudContactCollectionResponse: !include schemas/datacloudContactCollectionResponse-schema.json
  - datacloudOrderResponse: !include schemas/datacloudOrderResponse-schema.json
  - datacloudPurchaseUsageResponse: !include schemas/datacloudPurchaseUsageResponse-schema.json
  - editCapabilityResponse: !include schemas/editCapabilityResponse-schema.json
  - emailAddressResponse: !include schemas/emailAddressResponse-schema.json
  - emailMessageCapabilityResponse: !include schemas/emailMessageCapabilityResponse-schema.json
  - enhancedLinkCapabilityResponse: !include schemas/enhancedLinkCapabilityResponse-schema.json
  - errorMessageResponse: !include schemas/errorMessageResponse-schema.json
  - errorWithOutputResponse: !include schemas/errorWithOutputResponse-schema.json
  - explanationDetailsResponse: !include schemas/explanationDetailsResponse-schema.json
  - explanationSummaryResponse: !include schemas/explanationSummaryResponse-schema.json
  - favoriteResponse: !include schemas/favoriteResponse-schema.json
  - favoritesPageResponse: !include schemas/favoritesPageResponse-schema.json
  - featuresResponse: !include schemas/featuresResponse-schema.json
  - feedResponse: !include schemas/feedResponse-schema.json
  - feedDirectoryResponse: !include schemas/feedDirectoryResponse-schema.json
  - feedDirectoryItemResponse: !include schemas/feedDirectoryItemResponse-schema.json
  - feedElementCapabilitiesResponse: !include schemas/feedElementCapabilitiesResponse-schema.json
  - feedElementPageResponse: !include schemas/feedElementPageResponse-schema.json
  - feedEntityIsEditableResponse: !include schemas/feedEntityIsEditableResponse-schema.json
  - feedItemResponse: !include schemas/feedItemResponse-schema.json
  - feedItemAttachmentApprovalResponse: !include schemas/feedItemAttachmentApprovalResponse-schema.json
  - feedItemAttachmentBasicTemplateResponse: !include schemas/feedItemAttachmentBasicTemplateResponse-schema.json
  - feedItemAttachmentCanvasTemplateResponse: !include schemas/feedItemAttachmentCanvasTemplateResponse-schema.json
  - feedItemAttachmentCaseCommentResponse: !include schemas/feedItemAttachmentCaseCommentResponse-schema.json
  - feedItemAttachmentContentResponse: !include schemas/feedItemAttachmentContentResponse-schema.json
  - feedItemAttachmentDashboardResponse: !include schemas/feedItemAttachmentDashboardResponse-schema.json
  - feedItemAttachmentEmailMessageResponse: !include schemas/feedItemAttachmentEmailMessageResponse-schema.json
  - feedItemAttachmentLinkResponse: !include schemas/feedItemAttachmentLinkResponse-schema.json
  - feedItemAttachmentPollResponse: !include schemas/feedItemAttachmentPollResponse-schema.json
  - feedItemAttachmentRecordSnapshotResponse: !include schemas/feedItemAttachmentRecordSnapshotResponse-schema.json
  - feedItemAttachmentTrackedChangeResponse: !include schemas/feedItemAttachmentTrackedChangeResponse-schema.json
  - feedItemBodyResponse: !include schemas/feedItemBodyResponse-schema.json
  - feedItemPageResponse: !include schemas/feedItemPageResponse-schema.json
  - feedItemPreambleMessageBodyResponse: !include schemas/feedItemPreambleMessageBodyResponse-schema.json
  - feedItemTopicsResponse: !include schemas/feedItemTopicsResponse-schema.json
  - feedPollChoiceResponse: !include schemas/feedPollChoiceResponse-schema.json
  - feedTrackedChangeResponse: !include schemas/feedTrackedChangeResponse-schema.json
  - fileDetailResponse: !include schemas/fileDetailResponse-schema.json
  - fileShareLinkResponse: !include schemas/fileShareLinkResponse-schema.json
  - fileSharesPageResponse: !include schemas/fileSharesPageResponse-schema.json
  - fileSummaryResponse: !include schemas/fileSummaryResponse-schema.json
  - fileSummaryPageResponse: !include schemas/fileSummaryPageResponse-schema.json
  - filesConnectProviderTypeResponse: !include schemas/filesConnectProviderTypeResponse-schema.json
  - filesConnectRepositoryResponse: !include schemas/filesConnectRepositoryResponse-schema.json
  - filesConnectRepositoryCollectionResponse: !include schemas/filesConnectRepositoryCollectionResponse-schema.json
  - filesConnectRepositoryFeaturesResponse: !include schemas/filesConnectRepositoryFeaturesResponse-schema.json
  - flatFeedResponse: !include schemas/flatFeedResponse-schema.json
  - flatFeedItemResponse: !include schemas/flatFeedItemResponse-schema.json
  - folderResponse: !include schemas/folderResponse-schema.json
  - folderItemResponse: !include schemas/folderItemResponse-schema.json
  - folderItemPageResponse: !include schemas/folderItemPageResponse-schema.json
  - followerPageResponse: !include schemas/followerPageResponse-schema.json
  - followingCountsResponse: !include schemas/followingCountsResponse-schema.json
  - followingPageResponse: !include schemas/followingPageResponse-schema.json
  - genericBundleCapabilityResponse: !include schemas/genericBundleCapabilityResponse-schema.json
  - genericFeedElementResponse: !include schemas/genericFeedElementResponse-schema.json
  - groupResponse: !include schemas/groupResponse-schema.json
  - groupChatterSettingsResponse: !include schemas/groupChatterSettingsResponse-schema.json
  - groupDetailResponse: !include schemas/groupDetailResponse-schema.json
  - groupInformationResponse: !include schemas/groupInformationResponse-schema.json
  - groupMemberResponse: !include schemas/groupMemberResponse-schema.json
  - groupMemberPageResponse: !include schemas/groupMemberPageResponse-schema.json
  - groupMembershipRequestResponse: !include schemas/groupMembershipRequestResponse-schema.json
  - groupMembershipRequestCollectionResponse: !include schemas/groupMembershipRequestCollectionResponse-schema.json
  - groupPageResponse: !include schemas/groupPageResponse-schema.json
  - groupRecordResponse: !include schemas/groupRecordResponse-schema.json
  - groupRecordPageResponse: !include schemas/groupRecordPageResponse-schema.json
  - iconResponse: !include schemas/iconResponse-schema.json
  - influenceThresholdsResponse: !include schemas/influenceThresholdsResponse-schema.json
  - knowledgeablePeopleResponse: !include schemas/knowledgeablePeopleResponse-schema.json
  - knowledgeablePeopleCollectionResponse: !include schemas/knowledgeablePeopleCollectionResponse-schema.json
  - likeResponse: !include schemas/likeResponse-schema.json
  - likeMessageBodyResponse: !include schemas/likeMessageBodyResponse-schema.json
  - likePageResponse: !include schemas/likePageResponse-schema.json
  - linkCapabilityResponse: !include schemas/linkCapabilityResponse-schema.json
  - listViewColumnResponse: !include schemas/listViewColumnResponse-schema.json
  - listViewDefinitionResponse: !include schemas/listViewDefinitionResponse-schema.json
  - listViewObjectResponse: !include schemas/listViewObjectResponse-schema.json
  - listViewRecordResponse: !include schemas/listViewRecordResponse-schema.json
  - listViewSortResponse: !include schemas/listViewSortResponse-schema.json
  - maintenanceInformationResponse: !include schemas/maintenanceInformationResponse-schema.json
  - managedTopicResponse: !include schemas/managedTopicResponse-schema.json
  - managedTopicCollectionResponse: !include schemas/managedTopicCollectionResponse-schema.json
  - mentionCompletionResponse: !include schemas/mentionCompletionResponse-schema.json
  - mentionCompletionPageResponse: !include schemas/mentionCompletionPageResponse-schema.json
  - mentionValidationResponse: !include schemas/mentionValidationResponse-schema.json
  - mentionValidationsResponse: !include schemas/mentionValidationsResponse-schema.json
  - messageResponse: !include schemas/messageResponse-schema.json
  - messageCollectionResponse: !include schemas/messageCollectionResponse-schema.json
  - messageSegmentEntityLinkResponse: !include schemas/messageSegmentEntityLinkResponse-schema.json
  - messageSegmentFieldChangeResponse: !include schemas/messageSegmentFieldChangeResponse-schema.json
  - messageSegmentFieldChangeNameResponse: !include schemas/messageSegmentFieldChangeNameResponse-schema.json
  - messageSegmentFieldChangeValueResponse: !include schemas/messageSegmentFieldChangeValueResponse-schema.json
  - messageSegmentHashtagResponse: !include schemas/messageSegmentHashtagResponse-schema.json
  - messageSegmentLinkResponse: !include schemas/messageSegmentLinkResponse-schema.json
  - messageSegmentMentionResponse: !include schemas/messageSegmentMentionResponse-schema.json
  - messageSegmentMoreChangesResponse: !include schemas/messageSegmentMoreChangesResponse-schema.json
  - messageSegmentResourceLinkResponse: !include schemas/messageSegmentResourceLinkResponse-schema.json
  - messageSegmentTextResponse: !include schemas/messageSegmentTextResponse-schema.json
  - moderationCapabilityResponse: !include schemas/moderationCapabilityResponse-schema.json
  - moderationFlagsResponse: !include schemas/moderationFlagsResponse-schema.json
  - motifResponse: !include schemas/motifResponse-schema.json
  - nonentityRecommendationResponse: !include schemas/nonentityRecommendationResponse-schema.json
  - organizationResponse: !include schemas/organizationResponse-schema.json
  - originCapabilityResponse: !include schemas/originCapabilityResponse-schema.json
  - phoneNumberResponse: !include schemas/phoneNumberResponse-schema.json
  - photoResponse: !include schemas/photoResponse-schema.json
  - platformActionResponse: !include schemas/platformActionResponse-schema.json
  - platformActionGroupResponse: !include schemas/platformActionGroupResponse-schema.json
  - pollCapabilityResponse: !include schemas/pollCapabilityResponse-schema.json
  - questionAndAnswersCapabilityResponse: !include schemas/questionAndAnswersCapabilityResponse-schema.json
  - questionAndAnswersSuggestionCollectionResponse: !include schemas/questionAndAnswersSuggestionCollectionResponse-schema.json
  - recommendationResponse: !include schemas/recommendationResponse-schema.json
  - recommendationDefinitionResponse: !include schemas/recommendationDefinitionResponse-schema.json
  - recommendationDefinitionCollectionResponse: !include schemas/recommendationDefinitionCollectionResponse-schema.json
  - recommendationsResponse: !include schemas/recommendationsResponse-schema.json
  - recommendationsCapabilityResponse: !include schemas/recommendationsCapabilityResponse-schema.json
  - recommendedObjectResponse: !include schemas/recommendedObjectResponse-schema.json
  - recordFieldResponse: !include schemas/recordFieldResponse-schema.json
  - recordFieldBlankResponse: !include schemas/recordFieldBlankResponse-schema.json
  - recordFieldCompoundResponse: !include schemas/recordFieldCompoundResponse-schema.json
  - recordFieldCurrencyResponse: !include schemas/recordFieldCurrencyResponse-schema.json
  - recordFieldDateResponse: !include schemas/recordFieldDateResponse-schema.json
  - recordFieldPercentResponse: !include schemas/recordFieldPercentResponse-schema.json
  - recordFieldPicklistResponse: !include schemas/recordFieldPicklistResponse-schema.json
  - recordFieldReferenceResponse: !include schemas/recordFieldReferenceResponse-schema.json
  - recordFieldReferenceWithDateResponse: !include schemas/recordFieldReferenceWithDateResponse-schema.json
  - recordSnapshotCapabilityResponse: !include schemas/recordSnapshotCapabilityResponse-schema.json
  - recordSummaryResponse: !include schemas/recordSummaryResponse-schema.json
  - recordSummaryListResponse: !include schemas/recordSummaryListResponse-schema.json
  - recordViewResponse: !include schemas/recordViewResponse-schema.json
  - recordViewSectionResponse: !include schemas/recordViewSectionResponse-schema.json
  - referenceResponse: !include schemas/referenceResponse-schema.json
  - repositoryFileSummaryResponse: !include schemas/repositoryFileSummaryResponse-schema.json
  - repositoryFolderItemResponse: !include schemas/repositoryFolderItemResponse-schema.json
  - repositoryFolderItemsCollectionResponse: !include schemas/repositoryFolderItemsCollectionResponse-schema.json
  - repositoryFolderSummaryResponse: !include schemas/repositoryFolderSummaryResponse-schema.json
  - reputationResponse: !include schemas/reputationResponse-schema.json
  - reputationLevelResponse: !include schemas/reputationLevelResponse-schema.json
  - requestHeaderResponse: !include schemas/requestHeaderResponse-schema.json
  - scheduledRecommendationResponse: !include schemas/scheduledRecommendationResponse-schema.json
  - scheduledRecommendationCollectionResponse: !include schemas/scheduledRecommendationCollectionResponse-schema.json
  - sharesResponse: !include schemas/sharesResponse-schema.json
  - subscriptionResponse: !include schemas/subscriptionResponse-schema.json
  - subscriptionPageResponse: !include schemas/subscriptionPageResponse-schema.json
  - timeZoneResponse: !include schemas/timeZoneResponse-schema.json
  - topicResponse: !include schemas/topicResponse-schema.json
  - topicCollectionResponse: !include schemas/topicCollectionResponse-schema.json
  - topicEndorsementResponse: !include schemas/topicEndorsementResponse-schema.json
  - topicEndorsementCollectionResponse: !include schemas/topicEndorsementCollectionResponse-schema.json
  - topicImagesResponse: !include schemas/topicImagesResponse-schema.json
  - topicOptOutResponse: !include schemas/topicOptOutResponse-schema.json
  - topicOptOutCollectionResponse: !include schemas/topicOptOutCollectionResponse-schema.json
  - topicSuggestionResponse: !include schemas/topicSuggestionResponse-schema.json
  - topicSuggestionCollectionResponse: !include schemas/topicSuggestionCollectionResponse-schema.json
  - topicsCapabilityResponse: !include schemas/topicsCapabilityResponse-schema.json
  - topicsPeopleAreKnowledgeableAboutResponse: !include schemas/topicsPeopleAreKnowledgeableAboutResponse-schema.json
  - topicsPeopleAreKnowledgeableAboutCollectionResponse: !include schemas/topicsPeopleAreKnowledgeableAboutCollectionResponse-schema.json
  - trackedChangeBundleCapabilityResponse: !include schemas/trackedChangeBundleCapabilityResponse-schema.json
  - trackedChangesCapabilityResponse: !include schemas/trackedChangesCapabilityResponse-schema.json
  - unauthenticatedUserResponse: !include schemas/unauthenticatedUserResponse-schema.json
  - userCapabilitiesResponse: !include schemas/userCapabilitiesResponse-schema.json
  - userChatterSettingsResponse: !include schemas/userChatterSettingsResponse-schema.json
  - userDetailResponse: !include schemas/userDetailResponse-schema.json
  - userGroupPageResponse: !include schemas/userGroupPageResponse-schema.json
  - userPageResponse: !include schemas/userPageResponse-schema.json
  - userProfileResponse: !include schemas/userProfileResponse-schema.json
  - userProfileTabResponse: !include schemas/userProfileTabResponse-schema.json
  - userSettingsResponse: !include schemas/userSettingsResponse-schema.json
  - userStatusResponse: !include schemas/userStatusResponse-schema.json
  - userSummaryResponse: !include schemas/userSummaryResponse-schema.json
  - zoneResponse: !include schemas/zoneResponse-schema.json
  - zonePageResponse: !include schemas/zonePageResponse-schema.json
  - zoneSearchPageResponse: !include schemas/zoneSearchPageResponse-schema.json
  - zoneSearchResultResponse: !include schemas/zoneSearchResultResponse-schema.json
  - topicEndorseRequest: !include schemas/topicEndorseRequest-schema.json
  - updateUserInfoRequest: !include /schemas/updateUserInfoRequest-schema.json
resourceTypes:
  - fileShares: !include resourceTypes/fileShares.raml
  - feedElementsCapabilityComments: !include resourceTypes/feedElementsCapabilityComments.raml
  - recordFeedURL: !include resourceTypes/recordFeedURL.raml
  - topicFiles: !include resourceTypes/topicFiles.raml
  - recordFeedElements: !include resourceTypes/recordFeedElements.raml
  - groupRecords: !include resourceTypes/groupRecords.raml
  - motifsResource: !include resourceTypes/motifsResource.raml
  - feedElementsCapabilities: !include resourceTypes/feedElementsCapabilities.raml
  - followersRecordsResource: !include resourceTypes/followersRecordsResource.raml
  - userConversationsGeneral: !include resourceTypes/userConversationsGeneral.raml
  - batchGroupMemberships: !include resourceTypes/batchGroupMemberships.raml
  - announcementsResource: !include resourceTypes/announcementsResource.raml
  - filesFeedElements: !include resourceTypes/filesFeedElements.raml
  - feedElements: !include resourceTypes/feedElements.raml
  - feedElementsBatch: !include resourceTypes/feedElementsBatch.raml
  - feedElementsBatchGet: !include resourceTypes/feedElementsBatchGet.raml
  - feedElementsCapabilityLink: !include resourceTypes/feedElementsCapabilityLink.raml
  - feedElementsCapabilityRecommendations: !include resourceTypes/feedElementsCapabilityRecommendations.raml
  - topic: !include resourceTypes/topic.raml
  - specificFilterFeedURL: !include resourceTypes/specificFilterFeedURL.raml
  - feedElementsCapabilityTopics: !include resourceTypes/feedElementsCapabilityTopics.raml
  - userConversationsSpecific: !include resourceTypes/userConversationsSpecific.raml
  - feedElementsCapabilityCaseComment: !include resourceTypes/feedElementsCapabilityCaseComment.raml
  - listofZones: !include resourceTypes/listofZones.raml
  - userProfileFeedElements: !include resourceTypes/userProfileFeedElements.raml
  - groupInformation: !include resourceTypes/groupInformation.raml
  - topicGroups: !include resourceTypes/topicGroups.raml
  - feedElementsAssociatedActions: !include resourceTypes/feedElementsAssociatedActions.raml
  - recommendationDefinitionPhoto: !include resourceTypes/recommendationDefinitionPhoto.raml
  - groupMembersPrivate: !include resourceTypes/groupMembersPrivate.raml
  - comment: !include resourceTypes/comment.raml
  - commentCapabilityEditability: !include resourceTypes/commentCapabilityEditability.raml
  - sheduledRecommendations: !include resourceTypes/sheduledRecommendations.raml
  - scheduledRecommendation: !include resourceTypes/scheduledRecommendation.raml
  - mentionsValidations: !include resourceTypes/mentionsValidations.raml
  - fileRendition: !include resourceTypes/fileRendition.raml
  - feedElementsCapabilityDashboardComponentSnapshot: !include resourceTypes/feedElementsCapabilityDashboardComponentSnapshot.raml
  - groupSettings: !include resourceTypes/groupSettings.raml
  - feedElementsCapabilityBundleElements: !include resourceTypes/feedElementsCapabilityBundleElements.raml
  - filesSharesLink: !include resourceTypes/filesSharesLink.raml
  - questionAnswersSuggestionsResource: !include resourceTypes/questionAnswersSuggestionsResource.raml
  - fileContent: !include resourceTypes/fileContent.raml
  - feedElementsApproval: !include resourceTypes/feedElementsApproval.raml
  - topicsOptOutfromKnowledgeablePeopleList: !include resourceTypes/topicsOptOutfromKnowledgeablePeopleList.raml
  - recommendationDefinitions: !include resourceTypes/recommendationDefinitions.raml
  - topicsSuggestions: !include resourceTypes/topicsSuggestions.raml
  - groupAnnouncements: !include resourceTypes/groupAnnouncements.raml
  - feedElementsCapabilityModeration: !include resourceTypes/feedElementsCapabilityModeration.raml
  - subscriptionsResource: !include resourceTypes/subscriptionsResource.raml
  - batchUserInformation: !include resourceTypes/batchUserInformation.raml
  - actionLinkGroupIDDefinition: !include resourceTypes/actionLinkGroupIDDefinition.raml
  - feedSingleElement: !include resourceTypes/feedSingleElement.raml
  - influenceResource: !include resourceTypes/influenceResource.raml
  - feedsListofFavorites: !include resourceTypes/feedsListofFavorites.raml
  - feedsResource: !include resourceTypes/feedsResource.raml
  - batchGroupInformation: !include resourceTypes/batchGroupInformation.raml
  - filesFeedURL: !include resourceTypes/filesFeedURL.raml
  - fileInformation: !include resourceTypes/fileInformation.raml
  - toFeedURL: !include resourceTypes/toFeedURL.raml
  - companyFeedElements: !include resourceTypes/companyFeedElements.raml
  - userProfilesResource: !include resourceTypes/userProfilesResource.raml
  - groupsFeedURL: !include resourceTypes/groupsFeedURL.raml
  - zoneSearchResults: !include resourceTypes/zoneSearchResults.raml
  - feedElementsCapabilityEnhancedLink: !include resourceTypes/feedElementsCapabilityEnhancedLink.raml
  - listofTopics: !include resourceTypes/listofTopics.raml
  - feedElementsCapabilityEditability: !include resourceTypes/feedElementsCapabilityEditability.raml
  - listOfGroups: !include resourceTypes/listOfGroups.raml
  - groupTopics: !include resourceTypes/groupTopics.raml
  - topicEndorsements: !include resourceTypes/topicEndorsements.raml
  - feedElementsCapabilityQuestionAnswers: !include resourceTypes/feedElementsCapabilityQuestionAnswers.raml
  - userProfileFeedURL: !include resourceTypes/userProfileFeedURL.raml
  - userFavoritesFeedElements: !include resourceTypes/userFavoritesFeedElements.raml
  - topicsRecordsResource: !include resourceTypes/topicsRecordsResource.raml
  - trendingTopics: !include resourceTypes/trendingTopics.raml
  - batchMotifsResource: !include resourceTypes/batchMotifsResource.raml
  - fileInformationBatch: !include resourceTypes/fileInformationBatch.raml
  - groupPhoto: !include resourceTypes/groupPhoto.raml
  - actionLinkGroupDefinition: !include resourceTypes/actionLinkGroupDefinition.raml
  - peopleFeedElements: !include resourceTypes/peopleFeedElements.raml
  - feedElementsCapabilityPoll: !include resourceTypes/feedElementsCapabilityPoll.raml
  - feedElementsCapabilityBundle: !include resourceTypes/feedElementsCapabilityBundle.raml
  - newsFeedElements: !include resourceTypes/newsFeedElements.raml
  - feedElementsCapabilityChatterLikesItems: !include resourceTypes/feedElementsCapabilityChatterLikesItems.raml
  - groupMembershipsInformation: !include resourceTypes/groupMembershipsInformation.raml
  - topicsEndorsePeople: !include resourceTypes/topicsEndorsePeople.raml
  - feedElementsBookmarks: !include resourceTypes/feedElementsBookmarks.raml
  - bookmarksFeedElements: !include resourceTypes/bookmarksFeedElements.raml
  - feedElementsCapabilityTrackedChanges: !include resourceTypes/feedElementsCapabilityTrackedChanges.raml
  - mentionsCompletions: !include resourceTypes/mentionsCompletions.raml
  - feedElementsCapabilityRecordSnapshot: !include resourceTypes/feedElementsCapabilityRecordSnapshot.raml
  - actionLinkDiagnosticInformation: !include resourceTypes/actionLinkDiagnosticInformation.raml
  - userInformation: !include resourceTypes/userInformation.raml
  - companyFeedURL: !include resourceTypes/companyFeedURL.raml
  - groupRecord: !include resourceTypes/groupRecord.raml
  - bookmarksFeedURL: !include resourceTypes/bookmarksFeedURL.raml
  - actionLink: !include resourceTypes/actionLink.raml
  - groupFiles: !include resourceTypes/groupFiles.raml
  - groupMembershipRequestsPrivate: !include resourceTypes/groupMembershipRequestsPrivate.raml
  - peopleFeedURL: !include resourceTypes/peopleFeedURL.raml
  - feedElementsCapabilityCanvas: !include resourceTypes/feedElementsCapabilityCanvas.raml
  - userProfileInformation: !include resourceTypes/userProfileInformation.raml
  - usersFilesGeneral: !include resourceTypes/usersFilesGeneral.raml
  - filterFeedElements: !include resourceTypes/filterFeedElements.raml
  - listFilterFeedURLs: !include resourceTypes/listFilterFeedURLs.raml
  - topicsOptOutsKnowledgeablePeopleList: !include resourceTypes/topicsOptOutsKnowledgeablePeopleList.raml
  - likesResource: !include resourceTypes/likesResource.raml
  - groupsFeedElements: !include resourceTypes/groupsFeedElements.raml
  - feedElementsCapabilityOrigin: !include resourceTypes/feedElementsCapabilityOrigin.raml
  - feedElementsCapabilityEmailMessage: !include resourceTypes/feedElementsCapabilityEmailMessage.raml
  - topicsFeedURL: !include resourceTypes/topicsFeedURL.raml
  - userFeedsFavorites: !include resourceTypes/userFeedsFavorites.raml
  - commentLikes: !include resourceTypes/commentLikes.raml
  - actionLinkGroup: !include resourceTypes/actionLinkGroup.raml
  - feedElementsCapabilitiesBanner: !include resourceTypes/feedElementsCapabilitiesBanner.raml
  - groupMembers: !include resourceTypes/groupMembers.raml
  - topicsFeedElements: !include resourceTypes/topicsFeedElements.raml
  - newsFeedURL: !include resourceTypes/newsFeedURL.raml
  - chatterResource: !include resourceTypes/chatterResource.raml
  - relatedTopics: !include resourceTypes/relatedTopics.raml
  - zoneInformation: !include resourceTypes/zoneInformation.raml
  - topicsKnowledgeablePeopleList: !include resourceTypes/topicsKnowledgeablePeopleList.raml
  - getUnreadCountConversations: !include resourceTypes/getUnreadCountConversations.raml
  - recommendationDefinition: !include resourceTypes/recommendationDefinition.raml
  - toFeedElements: !include resourceTypes/toFeedElements.raml
  - feedElementsCapabilityCommentsItems: !include resourceTypes/feedElementsCapabilityCommentsItems.raml
  - feedElementsCapabilityChatterLikes: !include resourceTypes/feedElementsCapabilityChatterLikes.raml
  - feedElementsCapabilityContent: !include resourceTypes/feedElementsCapabilityContent.raml
  - userFilesFilteredByGroup: !include resourceTypes/userFilesFilteredByGroup.raml
  - userFilesFilteredBySharing: !include resourceTypes/userFilesFilteredBySharing.raml
traits:
  - isCommentLikes: !include traits/isCommentLikes.raml
  - sortedPage: !include traits/sortedPage.raml
  - isFeedElementsCapability: !include traits/isFeedElementsCapability.raml
  - filteredPage: !include traits/filteredPage.raml
  - isListOfCommunities: !include traits/isListOfCommunities.raml
  - pagination: !include traits/pagination.raml
/chatter:
  type: chatterResource
  /announcements/{announcementId}:
    type: announcementsResource
  /comments/{commentId}:
    type: comment
    patch:
      description: Edit a Comment
      body:
        application/json:
          schema: commentInputRequest
          example: !include examples/commentInputRequest-example.json
      responses:
        200:
          body:
            application/json:
              schema: commentResponse
    /capabilities/edit/is-editable-by-me:
      type: commentCapabilityEditability
    /likes:
      type: commentLikes
  /feed-elements:
    type: feedElements
    /batch:
      type: feedElementsBatch
      /{feedElementIds}:
        type: feedElementsBatchGet
    /{feedElementId}:
      type: feedSingleElement
      /capabilities:
        type: feedElementsCapabilities
        /approval:
          type: feedElementsApproval
        /associated-actions:
          type: feedElementsAssociatedActions
        /banner:
          type: feedElementsCapabilitiesBanner
        /bookmarks:
          type: feedElementsBookmarks
        /bundle:
          type: feedElementsCapabilityBundle
          /feed-elements:
            type: feedElementsCapabilityBundleElements
        /canvas:
          type: feedElementsCapabilityCanvas
        /case-comment:
          type: feedElementsCapabilityCaseComment
        /chatter-likes:
          type: feedElementsCapabilityChatterLikes
          /items:
            type: feedElementsCapabilityChatterLikesItems
        /comments:
          type: feedElementsCapabilityComments
          /items:
            type: feedElementsCapabilityCommentsItems
        /content:
          type: feedElementsCapabilityContent
        /dashboard-component-snapshot:
          type: feedElementsCapabilityDashboardComponentSnapshot
        /edit/is-editable-by-me:
          type: feedElementsCapabilityEditability
        /email-message:
          type: feedElementsCapabilityEmailMessage
        /enhanced-link:
          type: feedElementsCapabilityEnhancedLink
        /origin:
          type: feedElementsCapabilityOrigin
        /poll:
          type: feedElementsCapabilityPoll
        /question-and-answers:
          type: feedElementsCapabilityQuestionAnswers
        /recommendations:
          type: feedElementsCapabilityRecommendations
        /record-snapshot:
          type: feedElementsCapabilityRecordSnapshot
        /topics:
          type: feedElementsCapabilityTopics
        /tracked-changes:
          type: feedElementsCapabilityTrackedChanges
        /link:
          type: feedElementsCapabilityLink
  /feeds:
    type: feedsResource
    /bookmarks/{userId}:
      type: bookmarksFeedURL
      /feed-elements:
        type: bookmarksFeedElements
    /company:
      type: companyFeedURL
      /feed-elements:
        type: companyFeedElements
    /favorites/{userId}:
      type: feedsListofFavorites
      /{favoriteId}:
        type: userFeedsFavorites
        /feed-elements:
          type: userFavoritesFeedElements
    /files/{userId}:
      type: filesFeedURL
      /feed-elements:
        type: filesFeedElements
      /feed-items/flat:
        get:
          description: "Returns a flat feed, that is, a feed where there is no hierarchy between feed items and comments: Feed items and comments are at the same level. All items are returned in chronological order."
          responses:
            200:
              body:
                application/json:
                  schema: flatFeedResponse
        head:
          description: "Returns a flat feed, that is, a feed where there is no hierarchy between feed items and comments: Feed items and comments are at the same level. All items are returned in chronological order."
          responses:
            200:
    /filter/{userId}:
      type: listFilterFeedURLs
      /{keyPrefix}:
        type: specificFilterFeedURL
        /feed-elements:
          type: filterFeedElements
    /groups/{userId}:
      type: groupsFeedURL
      /feed-elements:
        type: groupsFeedElements
    /news/{userId}:
      type: newsFeedURL
      /feed-elements:
        type: newsFeedElements
    /people/{userId}:
      type: peopleFeedURL
      /feed-elements:
        type: peopleFeedElements
    /record/{recordId}:
      type: recordFeedURL
      /feed-elements:
        type: recordFeedElements
    /to/{userId}:
      type: toFeedURL
      /feed-elements:
        type: toFeedElements
    /topics/{topicId}:
      type: topicsFeedURL
      /feed-elements:
        type: topicsFeedElements
    /user-profile/{userId}:
      type: userProfileFeedURL
      /feed-elements:
        type: userProfileFeedElements
  /files:
    /{fileId}:
      type: fileInformation
      /content:
        type: fileContent
      /file-shares:
        type: fileShares
        /link:
          type: filesSharesLink
      /rendition:
        type: fileRendition
    /batch/fileIds:
      type: fileInformationBatch
  /folders/{folderId}:
    get:
      description: Get information about the specified folder.
      responses:
        200:
          body:
            application/json:
              schema: folderResponse
    delete:
      description: Deleting a folder deletes all the folders within that folder and removes all files from the deleted folders so they are no longer synced.
      responses:
        204:
    patch:
      description: Move, rename a folder.
      queryParameters:
        isInMy​FileSync:
          description: |
            true if the folder and all folders in this folder are synced with Salesforce Files Sync; false otherwise.
            Setting isInMyFileSync is valid only for the root folder. Once set to true, isInMyFileSync can’t be set to false.
          type: boolean
        parent​FolderId:
          description: The ID of the new parent folder. If null, the folder is removed from its current folder. If the specified ID is root, the folder is moved to the root of the user’s folder hierarchy.
          required: true
        name:
          description: The new name for the folder
          required: true
      body:
        application/json:
          schema: folderInputRequest
      responses:
        200:
          body:
            application/json:
              schema: folderResponse
    head:
      description: Get information about the specified folder.
      responses:
        200:
    /items:
      post:
        description: |
          Add a file to a folder and create a folder. Sync the root folder.

          To create a folder, you can use a request body or request parameters in a POST request.
        queryParameters:
          desc:
            description: The description of the file
          isInMy​FileSync:
            description: true if the folder and all folders in this folder are synced with Salesforce Files Sync; false otherwise.
            type: boolean
          title:
            description: The title of the file
          type:
            description: The item type. To create a folder, the value must be Folder.
            required: true
          folderPath:
            description: The path to the folder
            required: true
        body:
          application/json:
            schema: folderItemInputRequest
        responses:
          200:
            body:
              application/json:
                schema: folderItemResponse
                example: !include examples/addingFileInFolderResponse-example.json
      head:
        description: Get information about the contents of a folder.
        responses:
          200:
      get:
        is: [ filteredPage ]
        description: Get information about the contents of a folder.
        responses:
          200:
            body:
              application/json:
                schema: folderItemPageResponse
  /group-membership-requests/{requestId}:
    type: groupMembershipRequestsPrivate
  /group-memberships:
    /batch/{membershipIds}:
      type: batchGroupMemberships
    /{membershipId}:
      type: groupMembershipsInformation
  /group-records/{groupRecordId}:
    type: groupRecord
  /groups:
    type: listOfGroups
    /batch/{group_list}:
      type: batchGroupInformation
    /{groupId}:
      type: groupInformation
      /announcements:
        type: groupAnnouncements
      /files:
        type: groupFiles
      /members:
        type: groupMembers
        /requests:
          type: groupMembersPrivate
      /my-settings:
        type: groupSettings
      /photo:
        type: groupPhoto
      /records:
        type: groupRecords
      /topics:
        type: groupTopics
  /influence/thresholds:
    type: influenceResource
  /likes/{likeId}:
    type: likesResource
  /mentions/completions:
    type: mentionsCompletions
  /mentions/validations:
    type: mentionsValidations
  /records/{recordId}/followers:
    type: followersRecordsResource
  /subscriptions/{subscriptionId}:
    type: subscriptionsResource
  /users:
    type: userInformation
    /{userId}:
      type: userProfileInformation
      /files:
        type: usersFilesGeneral
        /filter:
          /groups:
            type: userFilesFilteredByGroup
          /shared-with-me:
            type: userFilesFilteredBySharing
      /conversations:
        type: userConversationsGeneral
        /{conversationId}:
          type: userConversationsSpecific
          /mark-read:
            put:
              description: Changes the status of the specified conversation. Also see Using POST, PATCH, or PUT for Input. You can also use PATCH on the conversations resource to change the status of a specified conversation.
              queryParameters:
                read:
                  description: Changes the conversation status to unread (false) or read (true).
                  type: boolean
              responses:
                200:
            post:
              description: Changes the status of the specified conversation. Also see Using POST, PATCH, or PUT for Input. You can also use PATCH on the conversations resource to change the status of a specified conversation.
              queryParameters:
                read:
                  description: Changes the conversation status to unread (false) or read (true).
                  type: boolean
              responses:
                201:
            patch:
              description: Changes the status of the specified conversation. Also see Using POST, PATCH, or PUT for Input. You can also use PATCH on the conversations resource to change the status of a specified conversation.
              queryParameters:
                read:
                  description: Changes the conversation status to unread (false) or read (true).
                  type: boolean
              responses:
                200:
        /unread-count:
          type: getUnreadCountConversations
    /batch/{user_list}:
      type: batchUserInformation
/connect:
  get:
    description: A directory of the organization and community resources available to the context user.
    responses:
      200:
        body:
          application/json:
            schema: connectDirectoryResponse
  head:
    description: A directory of the organization and community resources available to the context user.
    responses:
      200:
  /action-link-group-definitions:
    type: actionLinkGroupDefinition
    /{actionLinkGroupId}:
      type: actionLinkGroupIDDefinition
  /action-link-groups/{actionLinkGroupId}:
    type: actionLinkGroup
  /action-links/{actionLinkId}:
    type: actionLink
    /diagnostic-info:
      type: actionLinkDiagnosticInformation
  /batch:
    post:
      description: Create a request body with a batch of up to 25 subrequests and send them to the server in a single request to improve your application’s performance. The response bodies and HTTP statuses for each subrequest in the batch are returned within a single response body. Each subrequest counts against rate limits.
      body:
        application/json:
          schema: genericBatchCollectionInputRequest
          example: !include examples/genericBatchCollectionInputRequest-example.json
      responses:
        201:
          body:
            application/json:
              schema: batchResultsResponse
              example: !include examples/genericBatchCollectionInputResponse-example.json
  /communities:
    get:
      description: Returns a list of all communities available to the context user. If the user is an administrator, returns a list of all communities that meet the filter criteria. If the user is not an administrator, returns a list of all active communities that meet the filter criteria.
      responses:
        200:
          body:
            application/json:
              schema: communityPageResponse
    head:
      description: Returns a list of all communities available to the context user. If the user is an administrator, returns a list of all communities that meet the filter criteria. If the user is not an administrator, returns a list of all active communities that meet the filter criteria.
      responses:
        200:
    /{communityId}:
      get:
        description: Returns information about the specified community.
        responses:
          200:
            body:
              application/json:
                schema: communityResponse
      head:
        description: Returns information about the specified community.
        responses:
          200:
      /action-link-group-definitions:
        type: actionLinkGroupDefinition
        /{actionLinkGroupId}:
          type: actionLinkGroupIDDefinition
      /action-link-groups/{actionLinkGroupId}:
        type: actionLinkGroup
      /action-links/{actionLinkId}:
        type: actionLink
        /diagnostic-info:
          type: actionLinkDiagnosticInformation
      /chatter:
        type: chatterResource
        /announcements/{announcementId}:
          type: announcementsResource
        /comments/{commentId}:
          type: comment
          /capabilities/edit/is-editable-by-me:
            type: commentCapabilityEditability
          /likes:
            type: commentLikes
          /moderation-flags:
            get:
              is: [ isFeedElementsCapability ]
              description: |
                If the context user is a community moderator, returns the number of times a comment has been flagged by community members. Also flags a comment for moderation and deletes all flags on a comment.
                If the context user isn’t a community moderator, returns whether or not the user has flagged a comment. Also flags a comment for moderation and removes a flag the user previously added.
              responses:
                200:
                  body:
                    application/json:
                      schema: moderationFlagsResponse
            post:
              is: [ isFeedElementsCapability ]
              description: Create Moderation Flags​ on Comments.
              body:
                application/json:
                  schema: moderationFlags​CommentsRequest
                  example: !include examples/moderationFlags​CommentsRequest-example.json
              responses:
                201:
                  body:
                    application/json:
                      schema: moderationFlagsResponse
            delete:
              description: Delete Moderation Flags​ on Comments.
              queryParameters:
                userId:
                  description: The ID of the context user. If specified, removes the flag the user previously added to the comment. If not specified and the context user is a moderator for the community, all flags on the comment are removed.
              responses:
                204:
            head:
              description: |
                If the context user is a community moderator, returns the number of times a comment has been flagged by community members. Also flags a comment for moderation and deletes all flags on a comment.
                If the context user isn’t a community moderator, returns whether or not the user has flagged a comment. Also flags a comment for moderation and removes a flag the user previously added.
              responses:
                200:
        /feed-elements:
          type: feedElementsCapabilityModeration
          /batch:
            type: feedElementsBatch
            /{feedElementIds}:
              type: feedElementsBatchGet
          /{feedElementId}:
            type: feedSingleElement
            /capabilities:
              type: feedElementsCapabilities
              /approval:
                type: feedElementsApproval
              /associated-actions:
                type: feedElementsAssociatedActions
              /banner:
                type: feedElementsCapabilitiesBanner
              /bookmarks:
                type: feedElementsBookmarks
              /bundle:
                type: feedElementsCapabilityBundle
                /feed-elements:
                  type: feedElementsCapabilityBundleElements
              /canvas:
                type: feedElementsCapabilityCanvas
              /case-comment:
                type: feedElementsCapabilityCaseComment
              /chatter-likes:
                type: feedElementsCapabilityChatterLikes
                /items:
                  type: feedElementsCapabilityChatterLikesItems
              /comments:
                type: feedElementsCapabilityComments
                /items:
                  type: feedElementsCapabilityCommentsItems
              /content:
                type: feedElementsCapabilityContent
              /dashboard-component-snapshot:
                type: feedElementsCapabilityDashboardComponentSnapshot
              /edit/is-editable-by-me:
                type: feedElementsCapabilityEditability
              /email-message:
                type: feedElementsCapabilityEmailMessage
              /enhanced-link:
                type: feedElementsCapabilityEnhancedLink
              /moderation:
                type: feedElementsCapabilityModeration
              /origin:
                type: feedElementsCapabilityOrigin
              /poll:
                type: feedElementsCapabilityPoll
              /question-and-answers:
                type: feedElementsCapabilityQuestionAnswers
              /recommendations:
                type: feedElementsCapabilityRecommendations
              /record-snapshot:
                type: feedElementsCapabilityRecordSnapshot
              /topics:
                type: feedElementsCapabilityTopics
              /tracked-changes:
                type: feedElementsCapabilityTrackedChanges
              /link:
                type: feedElementsCapabilityLink
        /feeds:
          type: feedsResource
          /bookmarks/{userId}:
            type: bookmarksFeedURL
            /feed-elements:
              type: bookmarksFeedElements
          /home/feed-elements:
            head:
              description: Returns a list of all feed elements associated with any managed topic in the community.
              responses:
                200:
            get:
              is: [ sortedPage ]
              description: Returns a list of all feed elements associated with any managed topic in the community.
              queryParameters:
                filter:
                  description: |
                    Specifies the filter values that can be applied to a feed.
                    AllQuestions—Only feed elements that are questions.
                    CommunityScoped—Reserved for future use.
                    SolvedQuestions—Only feed elements that are questions and that have a best answer.
                    UnansweredQuestions—Only feed elements that are questions and that don’t have any answers.
                    UnsolvedQuestions—Only feed elements that are questions and that don’t have a best answer.
                  enum:
                    - CommunityScoped
                    - UnsolvedQuestions
                    - UnansweredQuestions
                    - SolvedQuestions
                    - AllQuestions
                  example: AllQuestions
              responses:
                200:
                  body:
                    application/json:
                      schema: feedElementPageResponse
          /moderation/feed-elements:
            head:
              description: If the context user is a community moderator with the “Moderate Communities Feeds” permission, returns a list of all feed elements and comments in the community that have been flagged by community members.
              responses:
                200:
            get:
              is: [ sortedPage ]
              description: If the context user is a community moderator with the “Moderate Communities Feeds” permission, returns a list of all feed elements and comments in the community that have been flagged by community members. By default, returns 25 feed elements per page of results.
              responses:
                200:
                  body:
                    application/json:
                      schema: feedElementPageResponse
          /company:
            type: companyFeedURL
            /feed-elements:
              type: companyFeedElements
          /favorites/{userId}:
            type: feedsListofFavorites
            /{favoriteId}:
              type: userFeedsFavorites
              /feed-elements:
                type: userFavoritesFeedElements
          /files/{userId}:
            type: filesFeedURL
            /feed-elements:
              type: filesFeedElements
          /filter/{userId}:
            type: listFilterFeedURLs
            /{keyPrefix}:
              type: specificFilterFeedURL
              /feed-elements:
                type: filterFeedElements
          /groups/{userId}:
            type: groupsFeedURL
            /feed-elements:
              type: groupsFeedElements
          /news/{userId}:
            type: newsFeedURL
            /feed-elements:
              type: newsFeedElements
          /people/{userId}:
            type: peopleFeedURL
            /feed-elements:
              type: peopleFeedElements
          /record/{recordId}:
            type: recordFeedURL
            /feed-elements:
              type: recordFeedElements
          /to/{userId}:
            type: toFeedURL
            /feed-elements:
              type: toFeedElements
          /topics/{topicId}:
            type: topicsFeedURL
            /feed-elements:
              type: topicsFeedElements
          /user-profile/{userId}:
            type: userProfileFeedURL
            /feed-elements:
              type: userProfileFeedElements
        /files:
          /moderation:
            get:
              is: [ pagination ]
              description: |
                Files that are flagged in a community.

                If the context user is a community moderator, returns the files that have been flagged by community members.
              queryParameters:
                q:
                  description: A query string to filter the results. The string must contain at least two characters, not including wildcards. For information about wildcards, see Wildcards.
              responses:
                200:
                  body:
                    application/json:
                      schema: fileSummaryResponse
            head:
              description: |
                Files that are flagged in a community.

                If the context user is a community moderator, returns the files that have been flagged by community members.
              responses:
                200:
          /{fileId}:
            type: fileInformation
            /moderation-flags:
              get:
                is: [ isFeedElementsCapability ]
                description: |
                  If the context user is a community moderator, returns the number of times a file has been flagged by community members. Also flags a file for moderation and deletes all flags on a file.

                  If the context user isn’t a community moderator, returns whether or not the user has flagged a file. Also flags a file for moderation and removes a flag the user previously added.
                responses:
                  200:
                    body:
                      application/json:
                        schema: moderationFlagsResponse
              post:
                is: [ isFeedElementsCapability ]
                description: Create Moderation Flags​ on Files
                body:
                  application/json:
                    schema: addModerationFlagRequest
                    example: !include examples/moderationFlags​FilesRequest-example.json
                responses:
                  201:
                    body:
                      application/json:
                        schema: moderationFlagsResponse
              delete:
                description: Delete Moderation Flags​ on Files
                queryParameters:
                  userId:
                    description: The ID of the context user. If specified, removes the flag the user previously added to the file. If not specified and the context user is a moderator for the community, all flags on the file are removed.
                responses:
                  204:
              head:
                description: |
                  If the context user is a community moderator, returns the number of times a file has been flagged by community members. Also flags a file for moderation and deletes all flags on a file.

                  If the context user isn’t a community moderator, returns whether or not the user has flagged a file. Also flags a file for moderation and removes a flag the user previously added.
                responses:
                  200:
            /content:
              type: fileContent
            /file-shares:
              type: fileShares
              /link:
                type: filesSharesLink
            /rendition:
              type: fileRendition
          /batch/fileIds:
            type: fileInformationBatch
        /group-membership-requests/{requestId}:
          type: groupMembershipRequestsPrivate
        /group-memberships:
          /batch/{membershipIds}:
            type: batchGroupMemberships
          /{membershipId}:
            type: groupMembershipsInformation
        /group-records/{groupRecordId}:
          type: groupRecord
        /groups:
          type: listOfGroups
          /batch/{group_list}:
            type: batchGroupInformation
          /{groupId}:
            type: groupInformation
            /announcements:
              type: groupAnnouncements
            /files:
              type: groupFiles
            /members:
              type: groupMembers
              /requests:
                type: groupMembersPrivate
            /my-settings:
              type: groupSettings
            /photo:
              type: groupPhoto
            /records:
              type: groupRecords
            /topics:
              type: groupTopics
        /influence/thresholds:
          type: influenceResource
        /likes/{likeId}:
          type: likesResource
        /mentions/completions:
          type: mentionsCompletions
        /mentions/validations:
          type: mentionsValidations
        /records/{recordId}/followers:
          type: followersRecordsResource
        /subscriptions/{subscriptionId}:
          type: subscriptionsResource
        /users:
          type: userInformation
          /{userId}:
            type: userProfileInformation
            /files:
              type: usersFilesGeneral
              /filter:
                /groups:
                  type: userFilesFilteredByGroup
                /shared-with-me:
                  type: userFilesFilteredBySharing
            /conversations:
              type: userConversationsGeneral
              /{conversationId}:
                type: userConversationsSpecific
              /unread-count:
                type: getUnreadCountConversations
          /batch/{user_list}:
            type: batchUserInformation
      /managed-topics:
        get:
          description: Get all the managed topics for a community.
          queryParameters:
            managedTopic​Type:
              description: |
                Type of managed topic.
                Featured—Topics that are featured, for example, on the community home page, but don’t provide overall navigation.
                Navigational—Topics that display in a navigational menu in the community.
                A topic can be associated with up to two managed topic types, so a topic can be both a Featured topic and a Navigational topic.
              enum: [ Navigational , Featured ]
          responses:
            200:
              body:
                application/json:
                  schema: managedTopicCollectionResponse
        post:
          description: |
            Create a managed topic.
            Only community managers (users with the “Create and Set Up Communities” or “Manage Communities” permission) can create or reorder managed topics.
          queryParameters:
            managedTopic​Type:
              description: |
                Type of managed topic.
                Featured—Topics that are featured, for example, on the community home page, but don’t provide overall navigation.
                Navigational—Topics that display in a navigational menu in the community.
                A topic can be associated with up to two managed topic types, so a topic can be both a Featured topic and a Navigational topic.

                You can create up to 25 managed topics per managedTopicType.
              required: true
              enum: [ Navigational , Featured ]
            name:
              description: |
                Name of the managed topic.
                Required for new topics
                You must specify either name or recordId. You can’t specify both.
              required: true
            recordId:
              description: |
                ID of the record to become a managed topic.
                In version 32.0, recordId must be a topic ID.
                Required if the Name property isn’t used
                You must specify either name or recordId. You can’t specify both.
              required: true
          body:
            application/json:
              schema: createManagedTopicsRequest
              example: !include examples/createManagedTopicsRequest-example.json
          responses:
            201:
              body:
                application/json:
                  schema: managedTopicResponse
        patch:
          description: |
            Reorder managed topics.
            Only community managers (users with the “Create and Set Up Communities” or “Manage Communities” permission) can create or reorder managed topics.
          body:
            application/json:
              schema: reoderManagedTopicsRequest
              example: !include examples/reoderManagedTopicsRequest-example.json
          responses:
            200:
              body:
                application/json:
                  schema: managedTopicCollectionResponse
        head:
          description: Get all the managed topics for a community.
          responses:
            200:
        /{managedTopicId}:
          head:
            description: |
              Get information about topic in a community.
            responses:
              200:
          get:
            description: Get information about topic in a community.
            responses:
              200:
                body:
                  application/json:
                    schema: managedTopicResponse
          delete:
            description: |
              Delete a managed topic in a community.
              Only community managers (users with the “Create and Set Up Communities” or “Manage Communities” permission) can delete managed topics.
            responses:
              204:
      /motifs:
        /{idOrPrefix}:
          type: motifsResource
        /batch/{idOrPrefixList}:
          type: batchMotifsResource
      /question-and-answers/suggestions:
        type: questionAnswersSuggestionsResource
      /recommendation-definitions:
        type: recommendationDefinitions
        /{recommendationDefinitionId}:
          type: recommendationDefinition
      /records/{recordId}/topics:
        type: topicsRecordsResource
      /scheduled-recommendations:
        type: sheduledRecommendations
        /{scheduledRecommendationId}:
          type: scheduledRecommendation
      /user-profiles/{userID}:
        type: userProfilesResource
      /zones:
        type: listofZones
        /{zoneId}:
          type: zoneInformation
          /search-results:
            type: zoneSearchResults
      /topics:
        type: listofTopics
        /{topicId}:
          type: topic
          /endorsements:
            type: topicsEndorsePeople
          /files:
            type: topicFiles
          /groups:
            type: topicGroups
          /knowledgeable-users:
            type: topicsKnowledgeablePeopleList
          /related-topics:
            type: relatedTopics
          /topic-opt-outs:
            type: topicsOptOutsKnowledgeablePeopleList
        /suggestions:
          type: topicsSuggestions
        /trending:
          type: trendingTopics
      /topic-endorsements/{endorsementId}:
        type: topicEndorsements
      /topic-opt-outs/{topicOptOutId}:
        type: topicsOptOutfromKnowledgeablePeopleList
  /organization:
    get:
      description: Information about the context user’s organization and settings.
      responses:
        200:
          body:
            application/json:
              schema: organizationResponse
    head:
      description: Information about the context user’s organization and settings.
      responses:
        200:
  /dashboards/components/{componentId}/snapshots:
    post:
      description: Post a snapshot of a dashboard component to a user, group, or dashboard feed to help other users follow changes in the data.
      body:
        application/json:
          schema: dashboardComponentSnapshotResourceRequest
          example: !include examples/dashboardComponentSnapshotResourceRequest-example.json
      responses:
        201:
          body:
            application/json:
              schema: dashboardComponentSnapshotResponse
  /datacloud:
    /companies/{companyId}:
      get:
        description: Returns the company fields for the specified companyId.
        responses:
          200:
            body:
              application/json:
                schema: datacloudCompanyCollectionResponse
    /contacts/{contactId}:
      get:
        description: Returns the contact information for the specified contact.
        responses:
          200:
            body:
              application/json:
                schema: datacloudContactResponse
    /orders:
      post:
        description: |
          Purchases the contacts or companies for the listed IDs. The POST request can have either contact IDs or Company IDs not both. orderInput.
          Purchase contacts or companies in a single POST request, and specify .
        body:
          application/json:
            schema: datacloudOrdersRequest
            example: !include examples/datacloudOrdersRequest-example.json
        responses:
          201:
            body:
              application/json:
                schema: datacloudOrderResponse
      /{orderId}:
        /contacts:
          get:
            is: [ pagination ]
            description: |
              Returns all the order information for a specific orderId for contacts.
              Order information includes the orderId, the number of purchased records for the orderId, the URL for the order information, and details for the purchased contacts. The orderId must be for purchased contacts. A request with an orderId for purchased companies fails.
            responses:
              200:
                body:
                  application/json:
                    schema: datacloudContactCollectionResponse
        /companies:
          get:
            description: The orderId must be for purchased companies. A request for a contact orderId fails. Order information includes the orderId, the number of purchased records for the order, information for the purchased companies, and the URLs for next and previous pages.
            queryParameters:
              page:
                description: The page number to be set as the URL for the current page.
                type: integer
                required: true
              pageSize:
                description: The number of the page that you want returned. The default page size is set to 25.
                type: integer
                default: 25
                example: 5
            responses:
              200:
                body:
                  application/json:
                    schema: datacloudCompanyCollectionResponse
    /usage/{userId}:
      get:
        description: Returns usage information for a Monthly user or a Listpool user.
        responses:
          200:
            body:
              application/json:
                schema: datacloudPurchaseUsageResponse
  /content-hub/repositories:
    get:
      is: [ pagination ]
      description: Get a list of files connect repositories.
      queryParameters:
        canBrowseOnly:
          description: Retrieves only repositories that support browsing.
          type: boolean
          example: true
        canSearchOnly:
          description: Retrieves only repositories that support searching.
          type: boolean
          example: true
      responses:
        200:
          body:
            application/json:
              schema: filesConnectRepositoryCollectionResponse
    /{repositoryId}:
      head:
        description: Get information about a files connect repository.
        responses:
          200:
      get:
        description: Get information about a files connect repository.
        responses:
          200:
            body:
              application/json:
                schema: filesConnectRepositoryResponse
      /files/{repositoryFileId}:
        get:
          description: Get information about a files connect repository file.
          responses:
            200:
              body:
                application/json:
                  schema: repositoryFileSummaryResponse
        head:
          description: Get information about a files connect repository file.
          responses:
            200:
        /content:
          head:
            description: Get the content of the repository file from the external system. The content is streamed as the body of the response.
            responses:
              200:
          get:
            description: Get the content of the repository file from the external system. The content is streamed as the body of the response.
            responses:
              200:
                body:
                  application/json:
      /folders/{repositoryFolderId}/items:
        get:
          is: [ pagination ]
          description: Get information about the files and folders in a repository folder.
          responses:
            200:
              body:
                application/json:
                  schema: repositoryFolderItemsCollectionResponse
        head:
          description: Get information about the files and folders in a repository folder.
          responses:
            200:
  /motifs:
    /{idOrPrefix}:
      type: motifsResource
    /batch/{idOrPrefixList}:
      type: batchMotifsResource
  /notifications/push:
    post:
      description: Send a mobile push notification to connected apps on users’ devices. This resource is only accessible when the session is established with a connected app that is developed in the same organization or installed in the same package as the recipient’s connected app.
      queryParameters:
        appName:
          description: The API name of the connected app that the push notification is sent to.
          required: true
        namespace:
          description: |
            The namespace of the connected app that the push notification is sent to.
            Required if the namespace is set
          required: true
        payload:
          description: The push notification payload in JSON format.
          required: true
        userIds:
          description: The push notification recipient user ids.
          required: true
      body:
        application/json:
          schema: notificationsPushRequest
          example: !include examples/notificationsPushRequest-example.json
      responses:
        200:
  /question-and-answers/suggestions:
    type: questionAnswersSuggestionsResource
  /recommendation-definitions:
    type: recommendationDefinitions
    /{recommendationDefinitionId}:
      type: recommendationDefinition
      /photo:
        type: recommendationDefinitionPhoto
  /records/{recordId}/topics:
    type: topicsRecordsResource
  /scheduled-recommendations:
    type: sheduledRecommendations
    /{scheduledRecommendationId}:
      type: scheduledRecommendation
  /user-profiles/{userID}:
    type: userProfilesResource
  /zones:
    type: listofZones
    /{zoneId}:
      type: zoneInformation
      /search-results:
        type: zoneSearchResults
  /topics:
    type: listofTopics
    /{topicId}:
      type: topic
      /endorsements:
        type: topicsEndorsePeople
      /files:
        type: topicFiles
      /groups:
        type: topicGroups
      /knowledgeable-users:
        type: topicsKnowledgeablePeopleList
      /related-topics:
        type: relatedTopics
      /topic-opt-outs:
        type: topicsOptOutsKnowledgeablePeopleList
    /suggestions:
      type: topicsSuggestions
    /trending:
      type: trendingTopics
  /topic-endorsements/{endorsementId}:
    type: topicEndorsements
  /topic-opt-outs/{topicOptOutId}:
    type: topicsOptOutfromKnowledgeablePeopleList
